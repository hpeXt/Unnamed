name: CI (Main Branch)

on:
  push:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  SQLX_OFFLINE: true
  DATABASE_URL: sqlite:data.db
  CI: true
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10

jobs:
  # 阶段1: 代码质量检查 (1-2分钟)
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Check formatting
      run: cargo fmt -- --check
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run clippy
      run: |
        cargo clippy --lib --bins -- -D warnings
        cargo clippy --all-targets --all-features

  # 阶段2: 核心测试 (3-5分钟)
  core-tests:
    name: Core Tests (${{ matrix.os }})
    needs: code-quality
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libglib2.0-dev libgtk-3-dev libwebkit2gtk-4.1-dev
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
          ${{ runner.os }}-cargo-
    
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
    
    - name: Run tests
      run: |
        cargo test --lib --bins
        cargo test --doc
    
    - name: Build
      run: cargo build --verbose

  # 阶段3: 插件构建 (2-3分钟)
  plugin-build:
    name: Plugin Build
    needs: code-quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/
          target/
        key: ${{ runner.os }}-plugins-${{ hashFiles('plugins/**/Cargo.lock') }}
    
    - name: Build plugins
      run: |
        for plugin in plugins/*/; do
          if [ -f "$plugin/Cargo.toml" ]; then
            echo "Building plugin: $(basename $plugin)"
            cd "$plugin"
            cargo build --target wasm32-unknown-unknown --release
            cd ../..
          fi
        done

  # 安全审计 (可选，允许失败)
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run cargo audit
      uses: rustsec/audit-check@v1.4.1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  # 最终状态报告
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, core-tests, plugin-build]
    if: always()
    
    steps:
    - name: Generate Summary
      run: |
        echo "# CI Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Results" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Core Tests | ${{ needs.core-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Plugin Build | ${{ needs.plugin-build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.code-quality.result }}" != "success" ] || \
           [ "${{ needs.core-tests.result }}" != "success" ] || \
           [ "${{ needs.plugin-build.result }}" != "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Build Failed** - Please check the logs above" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **All checks passed!**" >> $GITHUB_STEP_SUMMARY
        fi