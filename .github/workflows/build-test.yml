name: Build and Test Packages

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  SQLX_OFFLINE: true

jobs:
  test-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Tauri CLI
      run: cargo install tauri-cli
    
    - name: Build plugins
      run: |
        $env:DATABASE_URL="sqlite:data.db"
        Get-ChildItem -Path "plugins" -Directory | ForEach-Object {
          $pluginPath = $_.FullName
          if (Test-Path "$pluginPath\Cargo.toml") {
            Write-Host "Building plugin: $($_.Name)"
            Set-Location $pluginPath
            cargo build --target wasm32-unknown-unknown --release
            Set-Location ..\..
          }
        }
    
    - name: Build Windows packages
      run: |
        $env:DATABASE_URL="sqlite:../data.db"
        cd src-tauri
        cargo tauri build
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-packages
        path: |
          src-tauri/target/release/bundle/msi/*.msi
          src-tauri/target/release/bundle/nsis/*.exe
    
    - name: Test installation (MSI)
      if: success()
      run: |
        $msiFile = Get-ChildItem "src-tauri\target\release\bundle\msi" -Filter "*.msi" | Select-Object -First 1
        if ($msiFile) {
          Write-Host "Testing MSI installation..."
          # Note: Actual installation test would require admin rights
          Write-Host "MSI package created successfully: $($msiFile.Name)"
        }

  test-linux:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libwebkit2gtk-4.1-dev \
          build-essential \
          curl \
          wget \
          libssl-dev \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev
    
    - name: Install Tauri CLI
      run: cargo install tauri-cli
    
    - name: Build plugins
      run: |
        for plugin in plugins/*/; do
          if [ -f "$plugin/Cargo.toml" ]; then
            echo "Building plugin: $(basename $plugin)"
            cd "$plugin"
            cargo build --target wasm32-unknown-unknown --release
            cd ../..
          fi
        done
      env:
        DATABASE_URL: sqlite:data.db
    
    - name: Build Linux packages
      run: |
        cd src-tauri
        cargo tauri build
      env:
        DATABASE_URL: sqlite:../data.db
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-packages
        path: |
          src-tauri/target/release/bundle/deb/*.deb
          src-tauri/target/release/bundle/appimage/*.AppImage
    
    - name: Test AppImage
      if: success()
      run: |
        APP_IMAGE=$(find src-tauri/target/release/bundle/appimage -name "*.AppImage" | head -1)
        if [ -f "$APP_IMAGE" ]; then
          echo "Testing AppImage..."
          chmod +x "$APP_IMAGE"
          # Test if it's executable
          file "$APP_IMAGE"
          echo "AppImage created successfully: $(basename $APP_IMAGE)"
        fi

  test-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Install Tauri CLI
      run: cargo install tauri-cli
    
    - name: Build plugins
      run: |
        for plugin in plugins/*/; do
          if [ -f "$plugin/Cargo.toml" ]; then
            echo "Building plugin: $(basename $plugin)"
            cd "$plugin"
            cargo build --target wasm32-unknown-unknown --release
            cd ../..
          fi
        done
      env:
        DATABASE_URL: sqlite:data.db
    
    - name: Build macOS packages
      run: |
        cd src-tauri
        cargo tauri build
      env:
        DATABASE_URL: sqlite:../data.db
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-packages
        path: |
          src-tauri/target/release/bundle/macos/*.app
          src-tauri/target/release/bundle/dmg/*.dmg

  create-release:
    needs: [test-windows, test-linux, test-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-packages/*.msi
          windows-packages/*.exe
          linux-packages/*.deb
          linux-packages/*.AppImage
          macos-packages/*.dmg
        draft: true
        prerelease: false
        generate_release_notes: true