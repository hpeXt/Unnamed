name: CI (Simple)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  SQLX_OFFLINE: true
  DATABASE_URL: sqlite:data.db
  TMPDIR: /tmp
  SQLITE_TMPDIR: /tmp

jobs:
  # 第一阶段：基础检查（快速失败）
  basic-checks:
    name: Basic Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libglib2.0-dev libgtk-3-dev libwebkit2gtk-4.1-dev
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        targets: wasm32-unknown-unknown
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    # 1. 格式检查（最快，最先运行）
    - name: Check formatting
      run: cargo fmt -- --check
    
    # 2. 构建前端（Tauri需要）
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Build frontend
      run: |
        cd frontend
        npm install
        npm run build
    
    # 3. 编译检查
    - name: Check compilation
      run: cargo check --all
    
    # 3. Clippy（只检查主包）
    - name: Clippy (main package)
      run: cargo clippy --lib --bins -- -D warnings

  # 第二阶段：完整测试（仅在基础检查通过后运行）
  full-test:
    name: Full Test
    needs: basic-checks
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run tests
      run: cargo test --all
    
    - name: Build hello plugin
      run: |
        cd plugins/hello
        cargo build --target wasm32-unknown-unknown --release
    
    - name: Build echo plugin
      run: |
        cd plugins/echo
        cargo build --target wasm32-unknown-unknown --release