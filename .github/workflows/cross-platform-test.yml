name: Cross-Platform Build Test

on:
  workflow_dispatch:
    inputs:
      test_windows:
        description: 'Test Windows build'
        required: false
        default: true
        type: boolean
      test_linux:
        description: 'Test Linux build'
        required: false
        default: true
        type: boolean

jobs:
  test-windows:
    if: github.event.inputs.test_windows == 'true'
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies
        run: |
          cd frontend
          npm install
      
      - name: Build Windows App
        env:
          DATABASE_URL: sqlite:../data.db
        run: |
          cd src-tauri
          cargo tauri build
      
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            target/release/bundle/msi/*.msi
            target/release/bundle/nsis/*.exe
          if-no-files-found: error

  test-linux:
    if: github.event.inputs.test_linux == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            libgtk-3-dev \
            libssl-dev \
            libglib2.0-dev \
            libjavascriptcoregtk-4.0-dev \
            libsoup2.4-dev \
            libgdk-pixbuf2.0-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libcairo2-dev
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies
        run: |
          cd frontend
          npm install
      
      - name: Build Linux App
        env:
          DATABASE_URL: sqlite:../data.db
        run: |
          cd src-tauri
          cargo tauri build
      
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            target/release/bundle/deb/*.deb
            target/release/bundle/appimage/*.AppImage
          if-no-files-found: error

  test-builds:
    needs: [test-windows, test-linux]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: List build artifacts
        run: |
          echo "=== Build Artifacts ==="
          find . -type f -name "*.msi" -o -name "*.exe" -o -name "*.deb" -o -name "*.AppImage" | while read file; do
            echo "📦 $(basename "$file") - $(du -h "$file" | cut -f1)"
          done
      
      - name: Summary
        run: |
          echo "## 🎉 Cross-Platform Build Test Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Windows Build" >> $GITHUB_STEP_SUMMARY
          if [ -d "windows-build" ]; then
            echo "✅ Success" >> $GITHUB_STEP_SUMMARY
            echo "- MSI installer created" >> $GITHUB_STEP_SUMMARY
            echo "- EXE installer created" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Linux Build" >> $GITHUB_STEP_SUMMARY
          if [ -d "linux-build" ]; then
            echo "✅ Success" >> $GITHUB_STEP_SUMMARY
            echo "- DEB package created" >> $GITHUB_STEP_SUMMARY
            echo "- AppImage created" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi