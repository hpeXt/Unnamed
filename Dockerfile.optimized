# 使用cargo-chef优化Docker构建
# cargo-chef可以缓存依赖，大幅减少重复构建时间

# 第一阶段：计算依赖
FROM rust:1.79 AS chef
# 安装cargo-chef
RUN cargo install cargo-chef
WORKDIR /app

# 第二阶段：计划依赖
FROM chef AS planner
# 只复制Cargo文件
COPY Cargo.toml Cargo.lock ./
COPY src/Cargo.toml ./src/
COPY plugin-sdk/Cargo.toml ./plugin-sdk/
COPY plugins/hello/Cargo.toml ./plugins/hello/
COPY plugins/echo/Cargo.toml ./plugins/echo/
COPY plugins/data-collector/Cargo.toml ./plugins/data-collector/
COPY plugins/analyzer/Cargo.toml ./plugins/analyzer/
COPY plugins/system-stats-collector/Cargo.toml ./plugins/system-stats-collector/
COPY plugins/template/Cargo.toml ./plugins/template/
# 生成recipe.json
RUN cargo chef prepare --recipe-path recipe.json

# 第三阶段：构建依赖
FROM chef AS builder

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    libwebkit2gtk-4.1-dev \
    build-essential \
    curl \
    wget \
    libssl-dev \
    libgtk-3-dev \
    libayatana-appindicator3-dev \
    librsvg2-dev \
    && rm -rf /var/lib/apt/lists/*

# 添加wasm target
RUN rustup target add wasm32-unknown-unknown

# 复制recipe.json
COPY --from=planner /app/recipe.json recipe.json

# 构建依赖（这一步会被缓存）
RUN cargo chef cook --release --recipe-path recipe.json
# 为插件构建依赖
RUN cargo chef cook --release --target wasm32-unknown-unknown --recipe-path recipe.json

# 复制源代码
COPY . .

# 设置SQLx离线模式
ENV SQLX_OFFLINE=true
ENV DATABASE_URL=sqlite:data.db

# 构建应用
RUN cargo build --release

# 构建插件
RUN cd plugins/hello && cargo build --target wasm32-unknown-unknown --release && cd ../..
RUN cd plugins/echo && cargo build --target wasm32-unknown-unknown --release && cd ../..
RUN cd plugins/data-collector && cargo build --target wasm32-unknown-unknown --release && cd ../..
RUN cd plugins/analyzer && cargo build --target wasm32-unknown-unknown --release && cd ../..
RUN cd plugins/system-stats-collector && cargo build --target wasm32-unknown-unknown --release && cd ../..
RUN cd plugins/template && cargo build --target wasm32-unknown-unknown --release && cd ../..

# 第四阶段：运行时镜像
FROM debian:bookworm-slim

# 安装运行时依赖
RUN apt-get update && apt-get install -y \
    libwebkit2gtk-4.1-0 \
    libgtk-3-0 \
    libayatana-appindicator3-1 \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# 创建应用目录
WORKDIR /app

# 复制构建产物
COPY --from=builder /app/target/release/minimal-kernel /usr/local/bin/
COPY --from=builder /app/target/wasm32-unknown-unknown/release/*.wasm ./plugins/

# 创建数据目录
RUN mkdir -p /data

# 设置环境变量
ENV DATABASE_URL=sqlite:/data/data.db
ENV PLUGIN_DIR=/app/plugins

# 暴露端口（如果有web服务）
# EXPOSE 8080

# 运行应用
CMD ["minimal-kernel"]