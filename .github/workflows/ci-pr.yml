name: CI (Pull Request)

on:
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  SQLX_OFFLINE: true
  DATABASE_URL: sqlite:data.db
  CI: true

jobs:
  # 快速格式和代码质量检查
  quick-check:
    name: Quick Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Check formatting
      run: cargo fmt -- --check
    
    - name: Run clippy (warnings only)
      run: |
        # 只检查主包，允许warnings但记录它们
        cargo clippy --lib --bins 2>&1 | tee clippy.log || true
        # 显示warning数量
        echo "::notice::$(grep -c warning clippy.log || echo 0) clippy warnings found"

  # Linux单平台快速测试
  linux-test:
    name: Linux Test
    runs-on: ubuntu-latest
    needs: quick-check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libglib2.0-dev libgtk-3-dev libwebkit2gtk-4.1-dev
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-
    
    - name: Build frontend
      run: |
        cd frontend
        npm ci --prefer-offline
        npm run build
    
    - name: Run tests
      run: |
        # 只运行库测试（最快）
        cargo test --lib
        # 运行文档测试
        cargo test --doc
    
    - name: Check build
      run: cargo check --all

  # PR状态汇总
  pr-status:
    name: PR Status
    runs-on: ubuntu-latest
    needs: [quick-check, linux-test]
    if: always()
    
    steps:
    - name: Summary
      run: |
        echo "## PR CI Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.quick-check.result }}" == "success" ]; then
          echo "✅ Code formatting and linting passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code formatting or linting failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.linux-test.result }}" == "success" ]; then
          echo "✅ Linux tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Linux tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "💡 Full cross-platform tests will run after merge to main branch" >> $GITHUB_STEP_SUMMARY