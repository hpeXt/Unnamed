name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  SQLX_OFFLINE: true

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libglib2.0-dev libgtk-3-dev libwebkit2gtk-4.1-dev
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        targets: wasm32-unknown-unknown
        components: rustfmt, clippy
    
    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt -- --check
      env:
        DATABASE_URL: sqlite:data.db
    
    - name: Run clippy
      run: |
        # 检查主包
        cargo clippy --lib --bins -- -D warnings
        # 检查所有目标（允许插件有警告）
        cargo clippy --all-targets --all-features || true
      env:
        DATABASE_URL: sqlite:data.db
    
    - name: Run tests
      run: |
        cargo test --all-features
        cargo test --doc
      env:
        DATABASE_URL: sqlite:data.db
    
    - name: Build
      run: cargo build --verbose
      env:
        DATABASE_URL: sqlite:data.db
    
    - name: Build plugins
      run: |
        cd plugins/hello && cargo build --target wasm32-unknown-unknown --release && cd ../..
        cd plugins/echo && cargo build --target wasm32-unknown-unknown --release && cd ../..

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: |
        # 尝试使用二进制安装，更快
        curl -L https://github.com/rustsec/rustsec/releases/latest/download/cargo-audit-x86_64-unknown-linux-musl.tar.gz | tar xzf - -C $HOME/.cargo/bin
      continue-on-error: true
    
    - name: Fallback install cargo-audit from source
      if: failure()
      run: cargo install cargo-audit --features vendored-openssl
    
    - name: Run security audit
      run: cargo audit
      continue-on-error: true